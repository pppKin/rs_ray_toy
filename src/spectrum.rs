use crate::{
    misc::{clamp_t, find_interval, lerp},
    rtoycore::{N_SPECTRAL_SAMPLES, SPECTRUM_R_G_B_N},
};
use lazy_static::*;
use std::ops::{
    Add, AddAssign, Div, DivAssign, Index, IndexMut, Mul, MulAssign, Neg, Sub, SubAssign,
};

pub const SAMPLED_LAMBDA_START: u32 = 400;
pub const SAMPLED_LAMBDA_END: u32 = 700;
pub const N_CIE_SAMPLES: usize = 471;
pub const CIE_Y_INTEGRAL: f64 = 106.856895;
pub const N_RGB_2_SPECTSAMPLES: usize = 32;

pub const CIE_X: [f64; N_CIE_SAMPLES] = [
    // CIE X function values
    0.0001299000f64,
    0.0001458470f64,
    0.0001638021f64,
    0.0001840037f64,
    0.0002066902f64,
    0.0002321000f64,
    0.0002607280f64,
    0.0002930750f64,
    0.0003293880f64,
    0.0003699140f64,
    0.0004149000f64,
    0.0004641587f64,
    0.0005189860f64,
    0.0005818540f64,
    0.0006552347f64,
    0.0007416000f64,
    0.0008450296f64,
    0.0009645268f64,
    0.001094949f64,
    0.001231154f64,
    0.001368000f64,
    0.001502050f64,
    0.001642328f64,
    0.001802382f64,
    0.001995757f64,
    0.002236000f64,
    0.002535385f64,
    0.002892603f64,
    0.003300829f64,
    0.003753236f64,
    0.004243000f64,
    0.004762389f64,
    0.005330048f64,
    0.005978712f64,
    0.006741117f64,
    0.007650000f64,
    0.008751373f64,
    0.01002888f64,
    0.01142170f64,
    0.01286901f64,
    0.01431000f64,
    0.01570443f64,
    0.01714744f64,
    0.01878122f64,
    0.02074801f64,
    0.02319000f64,
    0.02620736f64,
    0.02978248f64,
    0.03388092f64,
    0.03846824f64,
    0.04351000f64,
    0.04899560f64,
    0.05502260f64,
    0.06171880f64,
    0.06921200f64,
    0.07763000f64,
    0.08695811f64,
    0.09717672f64,
    0.1084063f64,
    0.1207672f64,
    0.1343800f64,
    0.1493582f64,
    0.1653957f64,
    0.1819831f64,
    0.1986110f64,
    0.2147700f64,
    0.2301868f64,
    0.2448797f64,
    0.2587773f64,
    0.2718079f64,
    0.2839000f64,
    0.2949438f64,
    0.3048965f64,
    0.3137873f64,
    0.3216454f64,
    0.3285000f64,
    0.3343513f64,
    0.3392101f64,
    0.3431213f64,
    0.3461296f64,
    0.3482800f64,
    0.3495999f64,
    0.3501474f64,
    0.3500130f64,
    0.3492870f64,
    0.3480600f64,
    0.3463733f64,
    0.3442624f64,
    0.3418088f64,
    0.3390941f64,
    0.3362000f64,
    0.3331977f64,
    0.3300411f64,
    0.3266357f64,
    0.3228868f64,
    0.3187000f64,
    0.3140251f64,
    0.3088840f64,
    0.3032904f64,
    0.2972579f64,
    0.2908000f64,
    0.2839701f64,
    0.2767214f64,
    0.2689178f64,
    0.2604227f64,
    0.2511000f64,
    0.2408475f64,
    0.2298512f64,
    0.2184072f64,
    0.2068115f64,
    0.1953600f64,
    0.1842136f64,
    0.1733273f64,
    0.1626881f64,
    0.1522833f64,
    0.1421000f64,
    0.1321786f64,
    0.1225696f64,
    0.1132752f64,
    0.1042979f64,
    0.09564000f64,
    0.08729955f64,
    0.07930804f64,
    0.07171776f64,
    0.06458099f64,
    0.05795001f64,
    0.05186211f64,
    0.04628152f64,
    0.04115088f64,
    0.03641283f64,
    0.03201000f64,
    0.02791720f64,
    0.02414440f64,
    0.02068700f64,
    0.01754040f64,
    0.01470000f64,
    0.01216179f64,
    0.009919960f64,
    0.007967240f64,
    0.006296346f64,
    0.004900000f64,
    0.003777173f64,
    0.002945320f64,
    0.002424880f64,
    0.002236293f64,
    0.002400000f64,
    0.002925520f64,
    0.003836560f64,
    0.005174840f64,
    0.006982080f64,
    0.009300000f64,
    0.01214949f64,
    0.01553588f64,
    0.01947752f64,
    0.02399277f64,
    0.02910000f64,
    0.03481485f64,
    0.04112016f64,
    0.04798504f64,
    0.05537861f64,
    0.06327000f64,
    0.07163501f64,
    0.08046224f64,
    0.08973996f64,
    0.09945645f64,
    0.1096000f64,
    0.1201674f64,
    0.1311145f64,
    0.1423679f64,
    0.1538542f64,
    0.1655000f64,
    0.1772571f64,
    0.1891400f64,
    0.2011694f64,
    0.2133658f64,
    0.2257499f64,
    0.2383209f64,
    0.2510668f64,
    0.2639922f64,
    0.2771017f64,
    0.2904000f64,
    0.3038912f64,
    0.3175726f64,
    0.3314384f64,
    0.3454828f64,
    0.3597000f64,
    0.3740839f64,
    0.3886396f64,
    0.4033784f64,
    0.4183115f64,
    0.4334499f64,
    0.4487953f64,
    0.4643360f64,
    0.4800640f64,
    0.4959713f64,
    0.5120501f64,
    0.5282959f64,
    0.5446916f64,
    0.5612094f64,
    0.5778215f64,
    0.5945000f64,
    0.6112209f64,
    0.6279758f64,
    0.6447602f64,
    0.6615697f64,
    0.6784000f64,
    0.6952392f64,
    0.7120586f64,
    0.7288284f64,
    0.7455188f64,
    0.7621000f64,
    0.7785432f64,
    0.7948256f64,
    0.8109264f64,
    0.8268248f64,
    0.8425000f64,
    0.8579325f64,
    0.8730816f64,
    0.8878944f64,
    0.9023181f64,
    0.9163000f64,
    0.9297995f64,
    0.9427984f64,
    0.9552776f64,
    0.9672179f64,
    0.9786000f64,
    0.9893856f64,
    0.9995488f64,
    1.0090892f64,
    1.0180064f64,
    1.0263000f64,
    1.0339827f64,
    1.0409860f64,
    1.0471880f64,
    1.0524667f64,
    1.0567000f64,
    1.0597944f64,
    1.0617992f64,
    1.0628068f64,
    1.0629096f64,
    1.0622000f64,
    1.0607352f64,
    1.0584436f64,
    1.0552244f64,
    1.0509768f64,
    1.0456000f64,
    1.0390369f64,
    1.0313608f64,
    1.0226662f64,
    1.0130477f64,
    1.0026000f64,
    0.9913675f64,
    0.9793314f64,
    0.9664916f64,
    0.9528479f64,
    0.9384000f64,
    0.9231940f64,
    0.9072440f64,
    0.8905020f64,
    0.8729200f64,
    0.8544499f64,
    0.8350840f64,
    0.8149460f64,
    0.7941860f64,
    0.7729540f64,
    0.7514000f64,
    0.7295836f64,
    0.7075888f64,
    0.6856022f64,
    0.6638104f64,
    0.6424000f64,
    0.6215149f64,
    0.6011138f64,
    0.5811052f64,
    0.5613977f64,
    0.5419000f64,
    0.5225995f64,
    0.5035464f64,
    0.4847436f64,
    0.4661939f64,
    0.4479000f64,
    0.4298613f64,
    0.4120980f64,
    0.3946440f64,
    0.3775333f64,
    0.3608000f64,
    0.3444563f64,
    0.3285168f64,
    0.3130192f64,
    0.2980011f64,
    0.2835000f64,
    0.2695448f64,
    0.2561184f64,
    0.2431896f64,
    0.2307272f64,
    0.2187000f64,
    0.2070971f64,
    0.1959232f64,
    0.1851708f64,
    0.1748323f64,
    0.1649000f64,
    0.1553667f64,
    0.1462300f64,
    0.1374900f64,
    0.1291467f64,
    0.1212000f64,
    0.1136397f64,
    0.1064650f64,
    0.09969044f64,
    0.09333061f64,
    0.08740000f64,
    0.08190096f64,
    0.07680428f64,
    0.07207712f64,
    0.06768664f64,
    0.06360000f64,
    0.05980685f64,
    0.05628216f64,
    0.05297104f64,
    0.04981861f64,
    0.04677000f64,
    0.04378405f64,
    0.04087536f64,
    0.03807264f64,
    0.03540461f64,
    0.03290000f64,
    0.03056419f64,
    0.02838056f64,
    0.02634484f64,
    0.02445275f64,
    0.02270000f64,
    0.02108429f64,
    0.01959988f64,
    0.01823732f64,
    0.01698717f64,
    0.01584000f64,
    0.01479064f64,
    0.01383132f64,
    0.01294868f64,
    0.01212920f64,
    0.01135916f64,
    0.01062935f64,
    0.009938846f64,
    0.009288422f64,
    0.008678854f64,
    0.008110916f64,
    0.007582388f64,
    0.007088746f64,
    0.006627313f64,
    0.006195408f64,
    0.005790346f64,
    0.005409826f64,
    0.005052583f64,
    0.004717512f64,
    0.004403507f64,
    0.004109457f64,
    0.003833913f64,
    0.003575748f64,
    0.003334342f64,
    0.003109075f64,
    0.002899327f64,
    0.002704348f64,
    0.002523020f64,
    0.002354168f64,
    0.002196616f64,
    0.002049190f64,
    0.001910960f64,
    0.001781438f64,
    0.001660110f64,
    0.001546459f64,
    0.001439971f64,
    0.001340042f64,
    0.001246275f64,
    0.001158471f64,
    0.001076430f64,
    0.0009999493f64,
    0.0009287358f64,
    0.0008624332f64,
    0.0008007503f64,
    0.0007433960f64,
    0.0006900786f64,
    0.0006405156f64,
    0.0005945021f64,
    0.0005518646f64,
    0.0005124290f64,
    0.0004760213f64,
    0.0004424536f64,
    0.0004115117f64,
    0.0003829814f64,
    0.0003566491f64,
    0.0003323011f64,
    0.0003097586f64,
    0.0002888871f64,
    0.0002695394f64,
    0.0002515682f64,
    0.0002348261f64,
    0.0002191710f64,
    0.0002045258f64,
    0.0001908405f64,
    0.0001780654f64,
    0.0001661505f64,
    0.0001550236f64,
    0.0001446219f64,
    0.0001349098f64,
    0.0001258520f64,
    0.0001174130f64,
    0.0001095515f64,
    0.0001022245f64,
    0.00009539445f64,
    0.00008902390f64,
    0.00008307527f64,
    0.00007751269f64,
    0.00007231304f64,
    0.00006745778f64,
    0.00006292844f64,
    0.00005870652f64,
    0.00005477028f64,
    0.00005109918f64,
    0.00004767654f64,
    0.00004448567f64,
    0.00004150994f64,
    0.00003873324f64,
    0.00003614203f64,
    0.00003372352f64,
    0.00003146487f64,
    0.00002935326f64,
    0.00002737573f64,
    0.00002552433f64,
    0.00002379376f64,
    0.00002217870f64,
    0.00002067383f64,
    0.00001927226f64,
    0.00001796640f64,
    0.00001674991f64,
    0.00001561648f64,
    0.00001455977f64,
    0.00001357387f64,
    0.00001265436f64,
    0.00001179723f64,
    0.00001099844f64,
    0.00001025398f64,
    0.000009559646f64,
    0.000008912044f64,
    0.000008308358f64,
    0.000007745769f64,
    0.000007221456f64,
    0.000006732475f64,
    0.000006276423f64,
    0.000005851304f64,
    0.000005455118f64,
    0.000005085868f64,
    0.000004741466f64,
    0.000004420236f64,
    0.000004120783f64,
    0.000003841716f64,
    0.000003581652f64,
    0.000003339127f64,
    0.000003112949f64,
    0.000002902121f64,
    0.000002705645f64,
    0.000002522525f64,
    0.000002351726f64,
    0.000002192415f64,
    0.000002043902f64,
    0.000001905497f64,
    0.000001776509f64,
    0.000001656215f64,
    0.000001544022f64,
    0.000001439440f64,
    0.000001341977f64,
    0.000001251141f64,
];

pub const CIE_Y: [f64; N_CIE_SAMPLES] = [
    // CIE Y function values
    0.000003917000f64,
    0.000004393581f64,
    0.000004929604f64,
    0.000005532136f64,
    0.000006208245f64,
    0.000006965000f64,
    0.000007813219f64,
    0.000008767336f64,
    0.000009839844f64,
    0.00001104323f64,
    0.00001239000f64,
    0.00001388641f64,
    0.00001555728f64,
    0.00001744296f64,
    0.00001958375f64,
    0.00002202000f64,
    0.00002483965f64,
    0.00002804126f64,
    0.00003153104f64,
    0.00003521521f64,
    0.00003900000f64,
    0.00004282640f64,
    0.00004691460f64,
    0.00005158960f64,
    0.00005717640f64,
    0.00006400000f64,
    0.00007234421f64,
    0.00008221224f64,
    0.00009350816f64,
    0.0001061361f64,
    0.0001200000f64,
    0.0001349840f64,
    0.0001514920f64,
    0.0001702080f64,
    0.0001918160f64,
    0.0002170000f64,
    0.0002469067f64,
    0.0002812400f64,
    0.0003185200f64,
    0.0003572667f64,
    0.0003960000f64,
    0.0004337147f64,
    0.0004730240f64,
    0.0005178760f64,
    0.0005722187f64,
    0.0006400000f64,
    0.0007245600f64,
    0.0008255000f64,
    0.0009411600f64,
    0.001069880f64,
    0.001210000f64,
    0.001362091f64,
    0.001530752f64,
    0.001720368f64,
    0.001935323f64,
    0.002180000f64,
    0.002454800f64,
    0.002764000f64,
    0.003117800f64,
    0.003526400f64,
    0.004000000f64,
    0.004546240f64,
    0.005159320f64,
    0.005829280f64,
    0.006546160f64,
    0.007300000f64,
    0.008086507f64,
    0.008908720f64,
    0.009767680f64,
    0.01066443f64,
    0.01160000f64,
    0.01257317f64,
    0.01358272f64,
    0.01462968f64,
    0.01571509f64,
    0.01684000f64,
    0.01800736f64,
    0.01921448f64,
    0.02045392f64,
    0.02171824f64,
    0.02300000f64,
    0.02429461f64,
    0.02561024f64,
    0.02695857f64,
    0.02835125f64,
    0.02980000f64,
    0.03131083f64,
    0.03288368f64,
    0.03452112f64,
    0.03622571f64,
    0.03800000f64,
    0.03984667f64,
    0.04176800f64,
    0.04376600f64,
    0.04584267f64,
    0.04800000f64,
    0.05024368f64,
    0.05257304f64,
    0.05498056f64,
    0.05745872f64,
    0.06000000f64,
    0.06260197f64,
    0.06527752f64,
    0.06804208f64,
    0.07091109f64,
    0.07390000f64,
    0.07701600f64,
    0.08026640f64,
    0.08366680f64,
    0.08723280f64,
    0.09098000f64,
    0.09491755f64,
    0.09904584f64,
    0.1033674f64,
    0.1078846f64,
    0.1126000f64,
    0.1175320f64,
    0.1226744f64,
    0.1279928f64,
    0.1334528f64,
    0.1390200f64,
    0.1446764f64,
    0.1504693f64,
    0.1564619f64,
    0.1627177f64,
    0.1693000f64,
    0.1762431f64,
    0.1835581f64,
    0.1912735f64,
    0.1994180f64,
    0.2080200f64,
    0.2171199f64,
    0.2267345f64,
    0.2368571f64,
    0.2474812f64,
    0.2586000f64,
    0.2701849f64,
    0.2822939f64,
    0.2950505f64,
    0.3085780f64,
    0.3230000f64,
    0.3384021f64,
    0.3546858f64,
    0.3716986f64,
    0.3892875f64,
    0.4073000f64,
    0.4256299f64,
    0.4443096f64,
    0.4633944f64,
    0.4829395f64,
    0.5030000f64,
    0.5235693f64,
    0.5445120f64,
    0.5656900f64,
    0.5869653f64,
    0.6082000f64,
    0.6293456f64,
    0.6503068f64,
    0.6708752f64,
    0.6908424f64,
    0.7100000f64,
    0.7281852f64,
    0.7454636f64,
    0.7619694f64,
    0.7778368f64,
    0.7932000f64,
    0.8081104f64,
    0.8224962f64,
    0.8363068f64,
    0.8494916f64,
    0.8620000f64,
    0.8738108f64,
    0.8849624f64,
    0.8954936f64,
    0.9054432f64,
    0.9148501f64,
    0.9237348f64,
    0.9320924f64,
    0.9399226f64,
    0.9472252f64,
    0.9540000f64,
    0.9602561f64,
    0.9660074f64,
    0.9712606f64,
    0.9760225f64,
    0.9803000f64,
    0.9840924f64,
    0.9874812f64,
    0.9903128f64,
    0.9928116f64,
    0.9949501f64,
    0.9967108f64,
    0.9980983f64,
    0.9991120f64,
    0.9997482f64,
    1.0000000f64,
    0.9998567f64,
    0.9993046f64,
    0.9983255f64,
    0.9968987f64,
    0.9950000f64,
    0.9926005f64,
    0.9897426f64,
    0.9864444f64,
    0.9827241f64,
    0.9786000f64,
    0.9740837f64,
    0.9691712f64,
    0.9638568f64,
    0.9581349f64,
    0.9520000f64,
    0.9454504f64,
    0.9384992f64,
    0.9311628f64,
    0.9234576f64,
    0.9154000f64,
    0.9070064f64,
    0.8982772f64,
    0.8892048f64,
    0.8797816f64,
    0.8700000f64,
    0.8598613f64,
    0.8493920f64,
    0.8386220f64,
    0.8275813f64,
    0.8163000f64,
    0.8047947f64,
    0.7930820f64,
    0.7811920f64,
    0.7691547f64,
    0.7570000f64,
    0.7447541f64,
    0.7324224f64,
    0.7200036f64,
    0.7074965f64,
    0.6949000f64,
    0.6822192f64,
    0.6694716f64,
    0.6566744f64,
    0.6438448f64,
    0.6310000f64,
    0.6181555f64,
    0.6053144f64,
    0.5924756f64,
    0.5796379f64,
    0.5668000f64,
    0.5539611f64,
    0.5411372f64,
    0.5283528f64,
    0.5156323f64,
    0.5030000f64,
    0.4904688f64,
    0.4780304f64,
    0.4656776f64,
    0.4534032f64,
    0.4412000f64,
    0.4290800f64,
    0.4170360f64,
    0.4050320f64,
    0.3930320f64,
    0.3810000f64,
    0.3689184f64,
    0.3568272f64,
    0.3447768f64,
    0.3328176f64,
    0.3210000f64,
    0.3093381f64,
    0.2978504f64,
    0.2865936f64,
    0.2756245f64,
    0.2650000f64,
    0.2547632f64,
    0.2448896f64,
    0.2353344f64,
    0.2260528f64,
    0.2170000f64,
    0.2081616f64,
    0.1995488f64,
    0.1911552f64,
    0.1829744f64,
    0.1750000f64,
    0.1672235f64,
    0.1596464f64,
    0.1522776f64,
    0.1451259f64,
    0.1382000f64,
    0.1315003f64,
    0.1250248f64,
    0.1187792f64,
    0.1127691f64,
    0.1070000f64,
    0.1014762f64,
    0.09618864f64,
    0.09112296f64,
    0.08626485f64,
    0.08160000f64,
    0.07712064f64,
    0.07282552f64,
    0.06871008f64,
    0.06476976f64,
    0.06100000f64,
    0.05739621f64,
    0.05395504f64,
    0.05067376f64,
    0.04754965f64,
    0.04458000f64,
    0.04175872f64,
    0.03908496f64,
    0.03656384f64,
    0.03420048f64,
    0.03200000f64,
    0.02996261f64,
    0.02807664f64,
    0.02632936f64,
    0.02470805f64,
    0.02320000f64,
    0.02180077f64,
    0.02050112f64,
    0.01928108f64,
    0.01812069f64,
    0.01700000f64,
    0.01590379f64,
    0.01483718f64,
    0.01381068f64,
    0.01283478f64,
    0.01192000f64,
    0.01106831f64,
    0.01027339f64,
    0.009533311f64,
    0.008846157f64,
    0.008210000f64,
    0.007623781f64,
    0.007085424f64,
    0.006591476f64,
    0.006138485f64,
    0.005723000f64,
    0.005343059f64,
    0.004995796f64,
    0.004676404f64,
    0.004380075f64,
    0.004102000f64,
    0.003838453f64,
    0.003589099f64,
    0.003354219f64,
    0.003134093f64,
    0.002929000f64,
    0.002738139f64,
    0.002559876f64,
    0.002393244f64,
    0.002237275f64,
    0.002091000f64,
    0.001953587f64,
    0.001824580f64,
    0.001703580f64,
    0.001590187f64,
    0.001484000f64,
    0.001384496f64,
    0.001291268f64,
    0.001204092f64,
    0.001122744f64,
    0.001047000f64,
    0.0009765896f64,
    0.0009111088f64,
    0.0008501332f64,
    0.0007932384f64,
    0.0007400000f64,
    0.0006900827f64,
    0.0006433100f64,
    0.0005994960f64,
    0.0005584547f64,
    0.0005200000f64,
    0.0004839136f64,
    0.0004500528f64,
    0.0004183452f64,
    0.0003887184f64,
    0.0003611000f64,
    0.0003353835f64,
    0.0003114404f64,
    0.0002891656f64,
    0.0002684539f64,
    0.0002492000f64,
    0.0002313019f64,
    0.0002146856f64,
    0.0001992884f64,
    0.0001850475f64,
    0.0001719000f64,
    0.0001597781f64,
    0.0001486044f64,
    0.0001383016f64,
    0.0001287925f64,
    0.0001200000f64,
    0.0001118595f64,
    0.0001043224f64,
    0.00009733560f64,
    0.00009084587f64,
    0.00008480000f64,
    0.00007914667f64,
    0.00007385800f64,
    0.00006891600f64,
    0.00006430267f64,
    0.00006000000f64,
    0.00005598187f64,
    0.00005222560f64,
    0.00004871840f64,
    0.00004544747f64,
    0.00004240000f64,
    0.00003956104f64,
    0.00003691512f64,
    0.00003444868f64,
    0.00003214816f64,
    0.00003000000f64,
    0.00002799125f64,
    0.00002611356f64,
    0.00002436024f64,
    0.00002272461f64,
    0.00002120000f64,
    0.00001977855f64,
    0.00001845285f64,
    0.00001721687f64,
    0.00001606459f64,
    0.00001499000f64,
    0.00001398728f64,
    0.00001305155f64,
    0.00001217818f64,
    0.00001136254f64,
    0.00001060000f64,
    0.000009885877f64,
    0.000009217304f64,
    0.000008592362f64,
    0.000008009133f64,
    0.000007465700f64,
    0.000006959567f64,
    0.000006487995f64,
    0.000006048699f64,
    0.000005639396f64,
    0.000005257800f64,
    0.000004901771f64,
    0.000004569720f64,
    0.000004260194f64,
    0.000003971739f64,
    0.000003702900f64,
    0.000003452163f64,
    0.000003218302f64,
    0.000003000300f64,
    0.000002797139f64,
    0.000002607800f64,
    0.000002431220f64,
    0.000002266531f64,
    0.000002113013f64,
    0.000001969943f64,
    0.000001836600f64,
    0.000001712230f64,
    0.000001596228f64,
    0.000001488090f64,
    0.000001387314f64,
    0.000001293400f64,
    0.000001205820f64,
    0.000001124143f64,
    0.000001048009f64,
    0.0000009770578f64,
    0.0000009109300f64,
    0.0000008492513f64,
    0.0000007917212f64,
    0.0000007380904f64,
    0.0000006881098f64,
    0.0000006415300f64,
    0.0000005980895f64,
    0.0000005575746f64,
    0.0000005198080f64,
    0.0000004846123f64,
    0.0000004518100f64,
];

pub const CIE_Z: [f64; N_CIE_SAMPLES] = [
    // CIE Z function values
    0.0006061000f64,
    0.0006808792f64,
    0.0007651456f64,
    0.0008600124f64,
    0.0009665928f64,
    0.001086000f64,
    0.001220586f64,
    0.001372729f64,
    0.001543579f64,
    0.001734286f64,
    0.001946000f64,
    0.002177777f64,
    0.002435809f64,
    0.002731953f64,
    0.003078064f64,
    0.003486000f64,
    0.003975227f64,
    0.004540880f64,
    0.005158320f64,
    0.005802907f64,
    0.006450001f64,
    0.007083216f64,
    0.007745488f64,
    0.008501152f64,
    0.009414544f64,
    0.01054999f64,
    0.01196580f64,
    0.01365587f64,
    0.01558805f64,
    0.01773015f64,
    0.02005001f64,
    0.02251136f64,
    0.02520288f64,
    0.02827972f64,
    0.03189704f64,
    0.03621000f64,
    0.04143771f64,
    0.04750372f64,
    0.05411988f64,
    0.06099803f64,
    0.06785001f64,
    0.07448632f64,
    0.08136156f64,
    0.08915364f64,
    0.09854048f64,
    0.1102000f64,
    0.1246133f64,
    0.1417017f64,
    0.1613035f64,
    0.1832568f64,
    0.2074000f64,
    0.2336921f64,
    0.2626114f64,
    0.2947746f64,
    0.3307985f64,
    0.3713000f64,
    0.4162091f64,
    0.4654642f64,
    0.5196948f64,
    0.5795303f64,
    0.6456000f64,
    0.7184838f64,
    0.7967133f64,
    0.8778459f64,
    0.9594390f64,
    1.0390501f64,
    1.1153673f64,
    1.1884971f64,
    1.2581233f64,
    1.3239296f64,
    1.3856000f64,
    1.4426352f64,
    1.4948035f64,
    1.5421903f64,
    1.5848807f64,
    1.6229600f64,
    1.6564048f64,
    1.6852959f64,
    1.7098745f64,
    1.7303821f64,
    1.7470600f64,
    1.7600446f64,
    1.7696233f64,
    1.7762637f64,
    1.7804334f64,
    1.7826000f64,
    1.7829682f64,
    1.7816998f64,
    1.7791982f64,
    1.7758671f64,
    1.7721100f64,
    1.7682589f64,
    1.7640390f64,
    1.7589438f64,
    1.7524663f64,
    1.7441000f64,
    1.7335595f64,
    1.7208581f64,
    1.7059369f64,
    1.6887372f64,
    1.6692000f64,
    1.6475287f64,
    1.6234127f64,
    1.5960223f64,
    1.5645280f64,
    1.5281000f64,
    1.4861114f64,
    1.4395215f64,
    1.3898799f64,
    1.3387362f64,
    1.2876400f64,
    1.2374223f64,
    1.1878243f64,
    1.1387611f64,
    1.0901480f64,
    1.0419000f64,
    0.9941976f64,
    0.9473473f64,
    0.9014531f64,
    0.8566193f64,
    0.8129501f64,
    0.7705173f64,
    0.7294448f64,
    0.6899136f64,
    0.6521049f64,
    0.6162000f64,
    0.5823286f64,
    0.5504162f64,
    0.5203376f64,
    0.4919673f64,
    0.4651800f64,
    0.4399246f64,
    0.4161836f64,
    0.3938822f64,
    0.3729459f64,
    0.3533000f64,
    0.3348578f64,
    0.3175521f64,
    0.3013375f64,
    0.2861686f64,
    0.2720000f64,
    0.2588171f64,
    0.2464838f64,
    0.2347718f64,
    0.2234533f64,
    0.2123000f64,
    0.2011692f64,
    0.1901196f64,
    0.1792254f64,
    0.1685608f64,
    0.1582000f64,
    0.1481383f64,
    0.1383758f64,
    0.1289942f64,
    0.1200751f64,
    0.1117000f64,
    0.1039048f64,
    0.09666748f64,
    0.08998272f64,
    0.08384531f64,
    0.07824999f64,
    0.07320899f64,
    0.06867816f64,
    0.06456784f64,
    0.06078835f64,
    0.05725001f64,
    0.05390435f64,
    0.05074664f64,
    0.04775276f64,
    0.04489859f64,
    0.04216000f64,
    0.03950728f64,
    0.03693564f64,
    0.03445836f64,
    0.03208872f64,
    0.02984000f64,
    0.02771181f64,
    0.02569444f64,
    0.02378716f64,
    0.02198925f64,
    0.02030000f64,
    0.01871805f64,
    0.01724036f64,
    0.01586364f64,
    0.01458461f64,
    0.01340000f64,
    0.01230723f64,
    0.01130188f64,
    0.01037792f64,
    0.009529306f64,
    0.008749999f64,
    0.008035200f64,
    0.007381600f64,
    0.006785400f64,
    0.006242800f64,
    0.005749999f64,
    0.005303600f64,
    0.004899800f64,
    0.004534200f64,
    0.004202400f64,
    0.003900000f64,
    0.003623200f64,
    0.003370600f64,
    0.003141400f64,
    0.002934800f64,
    0.002749999f64,
    0.002585200f64,
    0.002438600f64,
    0.002309400f64,
    0.002196800f64,
    0.002100000f64,
    0.002017733f64,
    0.001948200f64,
    0.001889800f64,
    0.001840933f64,
    0.001800000f64,
    0.001766267f64,
    0.001737800f64,
    0.001711200f64,
    0.001683067f64,
    0.001650001f64,
    0.001610133f64,
    0.001564400f64,
    0.001513600f64,
    0.001458533f64,
    0.001400000f64,
    0.001336667f64,
    0.001270000f64,
    0.001205000f64,
    0.001146667f64,
    0.001100000f64,
    0.001068800f64,
    0.001049400f64,
    0.001035600f64,
    0.001021200f64,
    0.001000000f64,
    0.0009686400f64,
    0.0009299200f64,
    0.0008868800f64,
    0.0008425600f64,
    0.0008000000f64,
    0.0007609600f64,
    0.0007236800f64,
    0.0006859200f64,
    0.0006454400f64,
    0.0006000000f64,
    0.0005478667f64,
    0.0004916000f64,
    0.0004354000f64,
    0.0003834667f64,
    0.0003400000f64,
    0.0003072533f64,
    0.0002831600f64,
    0.0002654400f64,
    0.0002518133f64,
    0.0002400000f64,
    0.0002295467f64,
    0.0002206400f64,
    0.0002119600f64,
    0.0002021867f64,
    0.0001900000f64,
    0.0001742133f64,
    0.0001556400f64,
    0.0001359600f64,
    0.0001168533f64,
    0.0001000000f64,
    0.00008613333f64,
    0.00007460000f64,
    0.00006500000f64,
    0.00005693333f64,
    0.00004999999f64,
    0.00004416000f64,
    0.00003948000f64,
    0.00003572000f64,
    0.00003264000f64,
    0.00003000000f64,
    0.00002765333f64,
    0.00002556000f64,
    0.00002364000f64,
    0.00002181333f64,
    0.00002000000f64,
    0.00001813333f64,
    0.00001620000f64,
    0.00001420000f64,
    0.00001213333f64,
    0.00001000000f64,
    0.000007733333f64,
    0.000005400000f64,
    0.000003200000f64,
    0.000001333333f64,
    0.000000000000f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
    0.0f64,
];

pub const CIE_LAMBDA: [f64; N_CIE_SAMPLES] = [
    360_f64, 361_f64, 362_f64, 363_f64, 364_f64, 365_f64, 366_f64, 367_f64, 368_f64, 369_f64,
    370_f64, 371_f64, 372_f64, 373_f64, 374_f64, 375_f64, 376_f64, 377_f64, 378_f64, 379_f64,
    380_f64, 381_f64, 382_f64, 383_f64, 384_f64, 385_f64, 386_f64, 387_f64, 388_f64, 389_f64,
    390_f64, 391_f64, 392_f64, 393_f64, 394_f64, 395_f64, 396_f64, 397_f64, 398_f64, 399_f64,
    400_f64, 401_f64, 402_f64, 403_f64, 404_f64, 405_f64, 406_f64, 407_f64, 408_f64, 409_f64,
    410_f64, 411_f64, 412_f64, 413_f64, 414_f64, 415_f64, 416_f64, 417_f64, 418_f64, 419_f64,
    420_f64, 421_f64, 422_f64, 423_f64, 424_f64, 425_f64, 426_f64, 427_f64, 428_f64, 429_f64,
    430_f64, 431_f64, 432_f64, 433_f64, 434_f64, 435_f64, 436_f64, 437_f64, 438_f64, 439_f64,
    440_f64, 441_f64, 442_f64, 443_f64, 444_f64, 445_f64, 446_f64, 447_f64, 448_f64, 449_f64,
    450_f64, 451_f64, 452_f64, 453_f64, 454_f64, 455_f64, 456_f64, 457_f64, 458_f64, 459_f64,
    460_f64, 461_f64, 462_f64, 463_f64, 464_f64, 465_f64, 466_f64, 467_f64, 468_f64, 469_f64,
    470_f64, 471_f64, 472_f64, 473_f64, 474_f64, 475_f64, 476_f64, 477_f64, 478_f64, 479_f64,
    480_f64, 481_f64, 482_f64, 483_f64, 484_f64, 485_f64, 486_f64, 487_f64, 488_f64, 489_f64,
    490_f64, 491_f64, 492_f64, 493_f64, 494_f64, 495_f64, 496_f64, 497_f64, 498_f64, 499_f64,
    500_f64, 501_f64, 502_f64, 503_f64, 504_f64, 505_f64, 506_f64, 507_f64, 508_f64, 509_f64,
    510_f64, 511_f64, 512_f64, 513_f64, 514_f64, 515_f64, 516_f64, 517_f64, 518_f64, 519_f64,
    520_f64, 521_f64, 522_f64, 523_f64, 524_f64, 525_f64, 526_f64, 527_f64, 528_f64, 529_f64,
    530_f64, 531_f64, 532_f64, 533_f64, 534_f64, 535_f64, 536_f64, 537_f64, 538_f64, 539_f64,
    540_f64, 541_f64, 542_f64, 543_f64, 544_f64, 545_f64, 546_f64, 547_f64, 548_f64, 549_f64,
    550_f64, 551_f64, 552_f64, 553_f64, 554_f64, 555_f64, 556_f64, 557_f64, 558_f64, 559_f64,
    560_f64, 561_f64, 562_f64, 563_f64, 564_f64, 565_f64, 566_f64, 567_f64, 568_f64, 569_f64,
    570_f64, 571_f64, 572_f64, 573_f64, 574_f64, 575_f64, 576_f64, 577_f64, 578_f64, 579_f64,
    580_f64, 581_f64, 582_f64, 583_f64, 584_f64, 585_f64, 586_f64, 587_f64, 588_f64, 589_f64,
    590_f64, 591_f64, 592_f64, 593_f64, 594_f64, 595_f64, 596_f64, 597_f64, 598_f64, 599_f64,
    600_f64, 601_f64, 602_f64, 603_f64, 604_f64, 605_f64, 606_f64, 607_f64, 608_f64, 609_f64,
    610_f64, 611_f64, 612_f64, 613_f64, 614_f64, 615_f64, 616_f64, 617_f64, 618_f64, 619_f64,
    620_f64, 621_f64, 622_f64, 623_f64, 624_f64, 625_f64, 626_f64, 627_f64, 628_f64, 629_f64,
    630_f64, 631_f64, 632_f64, 633_f64, 634_f64, 635_f64, 636_f64, 637_f64, 638_f64, 639_f64,
    640_f64, 641_f64, 642_f64, 643_f64, 644_f64, 645_f64, 646_f64, 647_f64, 648_f64, 649_f64,
    650_f64, 651_f64, 652_f64, 653_f64, 654_f64, 655_f64, 656_f64, 657_f64, 658_f64, 659_f64,
    660_f64, 661_f64, 662_f64, 663_f64, 664_f64, 665_f64, 666_f64, 667_f64, 668_f64, 669_f64,
    670_f64, 671_f64, 672_f64, 673_f64, 674_f64, 675_f64, 676_f64, 677_f64, 678_f64, 679_f64,
    680_f64, 681_f64, 682_f64, 683_f64, 684_f64, 685_f64, 686_f64, 687_f64, 688_f64, 689_f64,
    690_f64, 691_f64, 692_f64, 693_f64, 694_f64, 695_f64, 696_f64, 697_f64, 698_f64, 699_f64,
    700_f64, 701_f64, 702_f64, 703_f64, 704_f64, 705_f64, 706_f64, 707_f64, 708_f64, 709_f64,
    710_f64, 711_f64, 712_f64, 713_f64, 714_f64, 715_f64, 716_f64, 717_f64, 718_f64, 719_f64,
    720_f64, 721_f64, 722_f64, 723_f64, 724_f64, 725_f64, 726_f64, 727_f64, 728_f64, 729_f64,
    730_f64, 731_f64, 732_f64, 733_f64, 734_f64, 735_f64, 736_f64, 737_f64, 738_f64, 739_f64,
    740_f64, 741_f64, 742_f64, 743_f64, 744_f64, 745_f64, 746_f64, 747_f64, 748_f64, 749_f64,
    750_f64, 751_f64, 752_f64, 753_f64, 754_f64, 755_f64, 756_f64, 757_f64, 758_f64, 759_f64,
    760_f64, 761_f64, 762_f64, 763_f64, 764_f64, 765_f64, 766_f64, 767_f64, 768_f64, 769_f64,
    770_f64, 771_f64, 772_f64, 773_f64, 774_f64, 775_f64, 776_f64, 777_f64, 778_f64, 779_f64,
    780_f64, 781_f64, 782_f64, 783_f64, 784_f64, 785_f64, 786_f64, 787_f64, 788_f64, 789_f64,
    790_f64, 791_f64, 792_f64, 793_f64, 794_f64, 795_f64, 796_f64, 797_f64, 798_f64, 799_f64,
    800_f64, 801_f64, 802_f64, 803_f64, 804_f64, 805_f64, 806_f64, 807_f64, 808_f64, 809_f64,
    810_f64, 811_f64, 812_f64, 813_f64, 814_f64, 815_f64, 816_f64, 817_f64, 818_f64, 819_f64,
    820_f64, 821_f64, 822_f64, 823_f64, 824_f64, 825_f64, 826_f64, 827_f64, 828_f64, 829_f64,
    830_f64,
];

pub const RGB_2_SPECTLAMBDA: [f64; N_RGB_2_SPECTSAMPLES] = [
    380.000000, 390.967743, 401.935486, 412.903229, 423.870972, 434.838715, 445.806458, 456.774200,
    467.741943, 478.709686, 489.677429, 500.645172, 511.612915, 522.580627, 533.548340, 544.516052,
    555.483765, 566.451477, 577.419189, 588.386902, 599.354614, 610.322327, 621.290039, 632.257751,
    643.225464, 654.193176, 665.160889, 676.128601, 687.096313, 698.064026, 709.031738, 720.000000,
];

pub const RGB_REFL_2_SPECT_WHITE: [f64; N_RGB_2_SPECTSAMPLES] = [
    1.0618958571272863e+00,
    1.0615019980348779e+00,
    1.0614335379927147e+00,
    1.0622711654692485e+00,
    1.0622036218416742e+00,
    1.0625059965187085e+00,
    1.0623938486985884e+00,
    1.0624706448043137e+00,
    1.0625048144827762e+00,
    1.0624366131308856e+00,
    1.0620694238892607e+00,
    1.0613167586932164e+00,
    1.0610334029377020e+00,
    1.0613868564828413e+00,
    1.0614215366116762e+00,
    1.0620336151299086e+00,
    1.0625497454805051e+00,
    1.0624317487992085e+00,
    1.0625249140554480e+00,
    1.0624277664486914e+00,
    1.0624749854090769e+00,
    1.0625538581025402e+00,
    1.0625326910104864e+00,
    1.0623922312225325e+00,
    1.0623650980354129e+00,
    1.0625256476715284e+00,
    1.0612277619533155e+00,
    1.0594262608698046e+00,
    1.0599810758292072e+00,
    1.0602547314449409e+00,
    1.0601263046243634e+00,
    1.0606565756823634e+00,
];

pub const RGB_REFL_2_SPECT_CYAN: [f64; N_RGB_2_SPECTSAMPLES] = [
    1.0414628021426751e+00,
    1.0328661533771188e+00,
    1.0126146228964314e+00,
    1.0350460524836209e+00,
    1.0078661447098567e+00,
    1.0422280385081280e+00,
    1.0442596738499825e+00,
    1.0535238290294409e+00,
    1.0180776226938120e+00,
    1.0442729908727713e+00,
    1.0529362541920750e+00,
    1.0537034271160244e+00,
    1.0533901869215969e+00,
    1.0537782700979574e+00,
    1.0527093770467102e+00,
    1.0530449040446797e+00,
    1.0550554640191208e+00,
    1.0553673610724821e+00,
    1.0454306634683976e+00,
    6.2348950639230805e-01,
    1.8038071613188977e-01,
    -7.6303759201984539e-03,
    -1.5217847035781367e-04,
    -7.5102257347258311e-03,
    -2.1708639328491472e-03,
    6.5919466602369636e-04,
    1.2278815318539780e-02,
    -4.4669775637208031e-03,
    1.7119799082865147e-02,
    4.9211089759759801e-03,
    5.8762925143334985e-03,
    2.5259399415550079e-02,
];

pub const RGB_REFL_2_SPECT_MAGENTA: [f64; N_RGB_2_SPECTSAMPLES] = [
    9.9422138151236850e-01,
    9.8986937122975682e-01,
    9.8293658286116958e-01,
    9.9627868399859310e-01,
    1.0198955019000133e+00,
    1.0166395501210359e+00,
    1.0220913178757398e+00,
    9.9651666040682441e-01,
    1.0097766178917882e+00,
    1.0215422470827016e+00,
    6.4031953387790963e-01,
    2.5012379477078184e-03,
    6.5339939555769944e-03,
    2.8334080462675826e-03,
    -5.1209675389074505e-11,
    -9.0592291646646381e-03,
    3.3936718323331200e-03,
    -3.0638741121828406e-03,
    2.2203936168286292e-01,
    6.3141140024811970e-01,
    9.7480985576500956e-01,
    9.7209562333590571e-01,
    1.0173770302868150e+00,
    9.9875194322734129e-01,
    9.4701725739602238e-01,
    8.5258623154354796e-01,
    9.4897798581660842e-01,
    9.4751876096521492e-01,
    9.9598944191059791e-01,
    8.6301351503809076e-01,
    8.9150987853523145e-01,
    8.4866492652845082e-01,
];

pub const RGB_REFL_2_SPECT_YELLOW: [f64; N_RGB_2_SPECTSAMPLES] = [
    5.5740622924920873e-03,
    -4.7982831631446787e-03,
    -5.2536564298613798e-03,
    -6.4571480044499710e-03,
    -5.9693514658007013e-03,
    -2.1836716037686721e-03,
    1.6781120601055327e-02,
    9.6096355429062641e-02,
    2.1217357081986446e-01,
    3.6169133290685068e-01,
    5.3961011543232529e-01,
    7.4408810492171507e-01,
    9.2209571148394054e-01,
    1.0460304298411225e+00,
    1.0513824989063714e+00,
    1.0511991822135085e+00,
    1.0510530911991052e+00,
    1.0517397230360510e+00,
    1.0516043086790485e+00,
    1.0511944032061460e+00,
    1.0511590325868068e+00,
    1.0516612465483031e+00,
    1.0514038526836869e+00,
    1.0515941029228475e+00,
    1.0511460436960840e+00,
    1.0515123758830476e+00,
    1.0508871369510702e+00,
    1.0508923708102380e+00,
    1.0477492815668303e+00,
    1.0493272144017338e+00,
    1.0435963333422726e+00,
    1.0392280772051465e+00,
];

pub const RGB_REFL_2_SPECT_RED: [f64; N_RGB_2_SPECTSAMPLES] = [
    1.6575604867086180e-01,
    1.1846442802747797e-01,
    1.2408293329637447e-01,
    1.1371272058349924e-01,
    7.8992434518899132e-02,
    3.2205603593106549e-02,
    -1.0798365407877875e-02,
    1.8051975516730392e-02,
    5.3407196598730527e-03,
    1.3654918729501336e-02,
    -5.9564213545642841e-03,
    -1.8444365067353252e-03,
    -1.0571884361529504e-02,
    -2.9375521078000011e-03,
    -1.0790476271835936e-02,
    -8.0224306697503633e-03,
    -2.2669167702495940e-03,
    7.0200240494706634e-03,
    -8.1528469000299308e-03,
    6.0772866969252792e-01,
    9.8831560865432400e-01,
    9.9391691044078823e-01,
    1.0039338994753197e+00,
    9.9234499861167125e-01,
    9.9926530858855522e-01,
    1.0084621557617270e+00,
    9.8358296827441216e-01,
    1.0085023660099048e+00,
    9.7451138326568698e-01,
    9.8543269570059944e-01,
    9.3495763980962043e-01,
    9.8713907792319400e-01,
];

pub const RGB_REFL_2_SPECT_GREEN: [f64; N_RGB_2_SPECTSAMPLES] = [
    2.6494153587602255e-03,
    -5.0175013429732242e-03,
    -1.2547236272489583e-02,
    -9.4554964308388671e-03,
    -1.2526086181600525e-02,
    -7.9170697760437767e-03,
    -7.9955735204175690e-03,
    -9.3559433444469070e-03,
    6.5468611982999303e-02,
    3.9572875517634137e-01,
    7.5244022299886659e-01,
    9.6376478690218559e-01,
    9.9854433855162328e-01,
    9.9992977025287921e-01,
    9.9939086751140449e-01,
    9.9994372267071396e-01,
    9.9939121813418674e-01,
    9.9911237310424483e-01,
    9.6019584878271580e-01,
    6.3186279338432438e-01,
    2.5797401028763473e-01,
    9.4014888527335638e-03,
    -3.0798345608649747e-03,
    -4.5230367033685034e-03,
    -6.8933410388274038e-03,
    -9.0352195539015398e-03,
    -8.5913667165340209e-03,
    -8.3690869120289398e-03,
    -7.8685832338754313e-03,
    -8.3657578711085132e-06,
    5.4301225442817177e-03,
    -2.7745589759259194e-03,
];

pub const RGB_REFL_2_SPECT_BLUE: [f64; N_RGB_2_SPECTSAMPLES] = [
    9.9209771469720676e-01,
    9.8876426059369127e-01,
    9.9539040744505636e-01,
    9.9529317353008218e-01,
    9.9181447411633950e-01,
    1.0002584039673432e+00,
    9.9968478437342512e-01,
    9.9988120766657174e-01,
    9.8504012146370434e-01,
    7.9029849053031276e-01,
    5.6082198617463974e-01,
    3.3133458513996528e-01,
    1.3692410840839175e-01,
    1.8914906559664151e-02,
    -5.1129770932550889e-06,
    -4.2395493167891873e-04,
    -4.1934593101534273e-04,
    1.7473028136486615e-03,
    3.7999160177631316e-03,
    -5.5101474906588642e-04,
    -4.3716662898480967e-05,
    7.5874501748732798e-03,
    2.5795650780554021e-02,
    3.8168376532500548e-02,
    4.9489586408030833e-02,
    4.9595992290102905e-02,
    4.9814819505812249e-02,
    3.9840911064978023e-02,
    3.0501024937233868e-02,
    2.1243054765241080e-02,
    6.9596532104356399e-03,
    4.1733649330980525e-03,
];

pub const RGB_ILLUM_2_SPECT_WHITE: [f64; N_RGB_2_SPECTSAMPLES] = [
    1.1565232050369776e+00,
    1.1567225000119139e+00,
    1.1566203150243823e+00,
    1.1555782088080084e+00,
    1.1562175509215700e+00,
    1.1567674012207332e+00,
    1.1568023194808630e+00,
    1.1567677445485520e+00,
    1.1563563182952830e+00,
    1.1567054702510189e+00,
    1.1565134139372772e+00,
    1.1564336176499312e+00,
    1.1568023181530034e+00,
    1.1473147688514642e+00,
    1.1339317140561065e+00,
    1.1293876490671435e+00,
    1.1290515328639648e+00,
    1.0504864823782283e+00,
    1.0459696042230884e+00,
    9.9366687168595691e-01,
    9.5601669265393940e-01,
    9.2467482033511805e-01,
    9.1499944702051761e-01,
    8.9939467658453465e-01,
    8.9542520751331112e-01,
    8.8870566693814745e-01,
    8.8222843814228114e-01,
    8.7998311373826676e-01,
    8.7635244612244578e-01,
    8.8000368331709111e-01,
    8.8065665428441120e-01,
    8.8304706460276905e-01,
];

pub const RGB_ILLUM_2_SPECT_CYAN: [f64; N_RGB_2_SPECTSAMPLES] = [
    1.1334479663682135e+00,
    1.1266762330194116e+00,
    1.1346827504710164e+00,
    1.1357395805744794e+00,
    1.1356371830149636e+00,
    1.1361152989346193e+00,
    1.1362179057706772e+00,
    1.1364819652587022e+00,
    1.1355107110714324e+00,
    1.1364060941199556e+00,
    1.1360363621722465e+00,
    1.1360122641141395e+00,
    1.1354266882467030e+00,
    1.1363099407179136e+00,
    1.1355450412632506e+00,
    1.1353732327376378e+00,
    1.1349496420726002e+00,
    1.1111113947168556e+00,
    9.0598740429727143e-01,
    6.1160780787465330e-01,
    2.9539752170999634e-01,
    9.5954200671150097e-02,
    -1.1650792030826267e-02,
    -1.2144633073395025e-02,
    -1.1148167569748318e-02,
    -1.1997606668458151e-02,
    -5.0506855475394852e-03,
    -7.9982745819542154e-03,
    -9.4722817708236418e-03,
    -5.5329541006658815e-03,
    -4.5428914028274488e-03,
    -1.2541015360921132e-02,
];

pub const RGB_ILLUM_2_SPECT_MAGENTA: [f64; N_RGB_2_SPECTSAMPLES] = [
    1.0371892935878366e+00,
    1.0587542891035364e+00,
    1.0767271213688903e+00,
    1.0762706844110288e+00,
    1.0795289105258212e+00,
    1.0743644742950074e+00,
    1.0727028691194342e+00,
    1.0732447452056488e+00,
    1.0823760816041414e+00,
    1.0840545681409282e+00,
    9.5607567526306658e-01,
    5.5197896855064665e-01,
    8.4191094887247575e-02,
    8.7940070557041006e-05,
    -2.3086408335071251e-03,
    -1.1248136628651192e-03,
    -7.7297612754989586e-11,
    -2.7270769006770834e-04,
    1.4466473094035592e-02,
    2.5883116027169478e-01,
    5.2907999827566732e-01,
    9.0966624097105164e-01,
    1.0690571327307956e+00,
    1.0887326064796272e+00,
    1.0637622289511852e+00,
    1.0201812918094260e+00,
    1.0262196688979945e+00,
    1.0783085560613190e+00,
    9.8333849623218872e-01,
    1.0707246342802621e+00,
    1.0634247770423768e+00,
    1.0150875475729566e+00,
];

pub const RGB_ILLUM_2_SPECT_YELLOW: [f64; N_RGB_2_SPECTSAMPLES] = [
    2.7756958965811972e-03,
    3.9673820990646612e-03,
    -1.4606936788606750e-04,
    3.6198394557748065e-04,
    -2.5819258699309733e-04,
    -5.0133191628082274e-05,
    -2.4437242866157116e-04,
    -7.8061419948038946e-05,
    4.9690301207540921e-02,
    4.8515973574763166e-01,
    1.0295725854360589e+00,
    1.0333210878457741e+00,
    1.0368102644026933e+00,
    1.0364884018886333e+00,
    1.0365427939411784e+00,
    1.0368595402854539e+00,
    1.0365645405660555e+00,
    1.0363938240707142e+00,
    1.0367205578770746e+00,
    1.0365239329446050e+00,
    1.0361531226427443e+00,
    1.0348785007827348e+00,
    1.0042729660717318e+00,
    8.4218486432354278e-01,
    7.3759394894801567e-01,
    6.5853154500294642e-01,
    6.0531682444066282e-01,
    5.9549794132420741e-01,
    5.9419261278443136e-01,
    5.6517682326634266e-01,
    5.6061186014968556e-01,
    5.8228610381018719e-01,
];

pub const RGB_ILLUM_2_SPECT_RED: [f64; N_RGB_2_SPECTSAMPLES] = [
    5.4711187157291841e-02,
    5.5609066498303397e-02,
    6.0755873790918236e-02,
    5.6232948615962369e-02,
    4.6169940535708678e-02,
    3.8012808167818095e-02,
    2.4424225756670338e-02,
    3.8983580581592181e-03,
    -5.6082252172734437e-04,
    9.6493871255194652e-04,
    3.7341198051510371e-04,
    -4.3367389093135200e-04,
    -9.3533962256892034e-05,
    -1.2354967412842033e-04,
    -1.4524548081687461e-04,
    -2.0047691915543731e-04,
    -4.9938587694693670e-04,
    2.7255083540032476e-02,
    1.6067405906297061e-01,
    3.5069788873150953e-01,
    5.7357465538418961e-01,
    7.6392091890718949e-01,
    8.9144466740381523e-01,
    9.6394609909574891e-01,
    9.8879464276016282e-01,
    9.9897449966227203e-01,
    9.8605140403564162e-01,
    9.9532502805345202e-01,
    9.7433478377305371e-01,
    9.9134364616871407e-01,
    9.8866287772174755e-01,
    9.9713856089735531e-01,
];

pub const RGB_ILLUM_2_SPECT_GREEN: [f64; N_RGB_2_SPECTSAMPLES] = [
    2.5168388755514630e-02,
    3.9427438169423720e-02,
    6.2059571596425793e-03,
    7.1120859807429554e-03,
    2.1760044649139429e-04,
    7.3271839984290210e-12,
    -2.1623066217181700e-02,
    1.5670209409407512e-02,
    2.8019603188636222e-03,
    3.2494773799897647e-01,
    1.0164917292316602e+00,
    1.0329476657890369e+00,
    1.0321586962991549e+00,
    1.0358667411948619e+00,
    1.0151235476834941e+00,
    1.0338076690093119e+00,
    1.0371372378155013e+00,
    1.0361377027692558e+00,
    1.0229822432557210e+00,
    9.6910327335652324e-01,
    -5.1785923899878572e-03,
    1.1131261971061429e-03,
    6.6675503033011771e-03,
    7.4024315686001957e-04,
    2.1591567633473925e-02,
    5.1481620056217231e-03,
    1.4561928645728216e-03,
    1.6414511045291513e-04,
    -6.4630764968453287e-03,
    1.0250854718507939e-02,
    4.2387394733956134e-02,
    2.1252716926861620e-02,
];

pub const RGB_ILLUM_2_SPECT_BLUE: [f64; N_RGB_2_SPECTSAMPLES] = [
    1.0570490759328752e+00,
    1.0538466912851301e+00,
    1.0550494258140670e+00,
    1.0530407754701832e+00,
    1.0579930596460185e+00,
    1.0578439494812371e+00,
    1.0583132387180239e+00,
    1.0579712943137616e+00,
    1.0561884233578465e+00,
    1.0571399285426490e+00,
    1.0425795187752152e+00,
    3.2603084374056102e-01,
    -1.9255628442412243e-03,
    -1.2959221137046478e-03,
    -1.4357356276938696e-03,
    -1.2963697250337886e-03,
    -1.9227081162373899e-03,
    1.2621152526221778e-03,
    -1.6095249003578276e-03,
    -1.3029983817879568e-03,
    -1.7666600873954916e-03,
    -1.2325281140280050e-03,
    1.0316809673254932e-02,
    3.1284512648354357e-02,
    8.8773879881746481e-02,
    1.3873621740236541e-01,
    1.5535067531939065e-01,
    1.4878477178237029e-01,
    1.6624255403475907e-01,
    1.6997613960634927e-01,
    1.5769743995852967e-01,
    1.9069090525482305e-01,
];

pub fn average_spectrum_samples(
    lambda: &[f64],
    vals: &[f64],
    n: usize,
    lambda_start: f64,
    lambda_end: f64,
) -> f64 {
    for i in 0..(n - 1) {
        assert!(lambda[i + 1] > lambda[i]);
    }
    assert!(lambda_start < lambda_end);

    // Handle cases with out-of-bounds range or single sample only
    if lambda_end <= lambda[0] {
        return vals[0];
    }
    if lambda_start >= lambda[n - 1] {
        return vals[n - 1];
    }
    if n == 1 {
        return vals[0];
    }

    let mut sum = 0_f64;
    // Add contributions of constant segments before/after samples
    if lambda_start < lambda[0] {
        sum += vals[0] * (lambda[0] - lambda_start);
    }
    if lambda_end > lambda[n - 1] {
        sum += vals[n - 1] * (lambda_end - lambda[n - 1]);
    }

    // Advance to first relevant wavelength segment
    // int i = 0;
    let mut i = 0_usize;
    while lambda_start > lambda[i + 1] {
        i += 1;
    }
    assert!((i + 1) < n);

    // Loop over wavelength sample segments and add contributions
    let interp = |w: f64, i: usize| -> f64 {
        return lerp(
            (w - lambda[i]) / (lambda[i + 1] - lambda[i]),
            vals[i],
            vals[i + 1],
        );
    };

    while (i + 1) < n && lambda_end >= lambda[i] {
        let seg_lambda_start = lambda_start.max(lambda[i]);
        let seg_lambda_end = lambda_end.max(lambda[i + 1]);
        sum += 0.5
            * (interp(seg_lambda_start, i) + interp(seg_lambda_end, i))
            * (seg_lambda_end - seg_lambda_start);
        i += 1;
    }
    return sum / (lambda_end - lambda_start);
}

pub fn spectrum_samples_sorted(lambda: &[f64], n: usize) -> bool {
    for i in 0..(n - 1) {
        if lambda[i + 1] < lambda[i] {
            return false;
        }
    }
    true
}

pub fn sort_spectrum_samples(lambda: &mut [f64], vals: &mut [f64], n: usize) {
    let mut sort_vec = Vec::<(f64, f64)>::with_capacity(n);
    for i in 0..n {
        sort_vec.push((lambda[i], vals[i]));
    }
    sort_vec.sort_by(|a, b| {
        a.0.partial_cmp(&b.0)
            .expect("FAILED sorting Spectrum samples!")
    });

    for i in 0..n {
        lambda[i] = sort_vec[i].0;
        vals[i] = sort_vec[i].1;
    }
}

#[inline]
pub fn xyz_to_rgb(xyz: &[f64], rgb: &mut [f64]) {
    assert_eq!(xyz.len(), 3);
    assert_eq!(rgb.len(), 3);
    rgb[0] = 3.240479f64 * xyz[0] - 1.537150f64 * xyz[1] - 0.498535f64 * xyz[2];
    rgb[1] = -0.969256f64 * xyz[0] + 1.875991f64 * xyz[1] + 0.041556f64 * xyz[2];
    rgb[2] = 0.055648f64 * xyz[0] - 0.204043f64 * xyz[1] + 1.057311f64 * xyz[2];
}

#[inline]
pub fn rgb_to_xyz(rgb: &[f64], xyz: &mut [f64]) {
    assert_eq!(xyz.len(), 3);
    assert_eq!(rgb.len(), 3);
    xyz[0] = 0.412453f64 * rgb[0] + 0.357580f64 * rgb[1] + 0.180423f64 * rgb[2];
    xyz[1] = 0.212671f64 * rgb[0] + 0.715160f64 * rgb[1] + 0.072169f64 * rgb[2];
    xyz[2] = 0.019334f64 * rgb[0] + 0.119193f64 * rgb[1] + 0.950227f64 * rgb[2];
}

pub fn interpolate_spectrum_samples(lambda: &[f64], vals: &[f64], n: usize, l: f64) -> f64 {
    for i in 0..(n - 1) {
        assert!(lambda[i + 1] > lambda[i]);
    }
    if l <= lambda[0] {
        return vals[0];
    }
    if l >= lambda[n - 1] {
        return vals[n - 1];
    }
    let offset = find_interval(n, |index| lambda[index] <= l) as usize;
    assert!(l >= lambda[offset] && l <= lambda[offset + 1]);
    let t = (l - lambda[offset]) / (lambda[offset + 1] - lambda[offset]);
    return lerp(t, vals[offset], vals[offset + 1]);
}

pub fn blackbody(lambda: &[f64], n: usize, t: f64, le: &mut [f64]) {
    if t <= 0_f64 {
        for i in 0..n {
            le[i] = 0_f64;
        }
        return;
    }

    let c: f64 = 299792458_f64;
    let h: f64 = 6.62606957e-34;
    let kb: f64 = 1.3806488e-23;
    for i in 0..n {
        // Compute emitted radiance for blackbody at wavelength _lambda[i]_
        let l = lambda[i] * 1e-9;
        le[i] = (2_f64 * h * c * c) / (l.powi(5) * (((h * c) / (l * kb * t)).exp() - 1_f64));
        assert!(!le[i].is_nan());
    }
}

pub fn blackbody_normalized(lambda: &[f64], n: usize, t: f64, le: &mut [f64]) {
    blackbody(lambda, n, t, le);
    let lambda_max = [2.8977721e-3 / t * 1e9];
    let mut max_l = [0_f64];
    blackbody(&lambda_max, 1, t, &mut max_l);
    for i in 0..n {
        le[i] /= max_l[0];
    }
}

pub enum SpectrumType {
    Reflectance,
    Illuminant,
}

// SampledSpectrum uses the CoefficientSpectrum infrastructure to represent
// an SPD with uniformly spaced samples between
// a starting and an ending wavelength
#[derive(Debug, Clone, Copy)]
pub struct Spectrum<const N: usize> {
    c: [f64; N],
}

impl<const N: usize> Default for Spectrum<N> {
    fn default() -> Self {
        let c = [0_f64; N];
        Self { c }
    }
}

impl<const N: usize> Spectrum<N> {
    pub fn new(c: [f64; N]) -> Self {
        Self { c }
    }

    pub fn is_black(&self) -> bool {
        for i in 0..N {
            if self.c[i] != 0.0 {
                return false;
            }
        }
        return true;
    }

    pub fn sqrt(&self) -> Self {
        let mut c = [0_f64; N];
        for i in 0..N {
            c[i] = self.c[i].sqrt();
        }
        Self::new(c)
    }

    pub fn exp(&self) -> Self {
        let mut c = [0_f64; N];
        for i in 0..N {
            c[i] = self.c[i].exp();
        }
        Self::new(c)
    }

    pub fn pow(&self, n: f64) -> Self {
        let mut c = [0_f64; N];
        for i in 0..N {
            c[i] = self.c[i].powf(n);
        }
        Self::new(c)
    }

    pub fn clamp(&self, low: f64, high: f64) -> Self {
        let mut c = [0.0; N];
        for i in 0..N {
            c[i] = clamp_t(self.c[i], low, high);
        }
        Self::new(c)
    }

    pub fn max_component_value(&self) -> f64 {
        let mut m = self.c[0];
        if N > 1 {
            for i in 1..N {
                m = m.max(self.c[i]);
            }
        }
        m
    }

    pub fn has_nan(&self) -> bool {
        for i in 0..N {
            if self.c[i].is_nan() {
                return true;
            }
        }
        false
    }

    // just for convenience
    pub fn zero() -> Self {
        Self::from(0.0)
    }

    pub fn one() -> Self {
        Self::from(1.0)
    }
}

pub type SampledSpectrum = Spectrum<N_SPECTRAL_SAMPLES>;
pub type RGBSpectrum = Spectrum<SPECTRUM_R_G_B_N>;

impl<const N: usize> Add<Spectrum<N>> for Spectrum<N> {
    type Output = Spectrum<N>;
    fn add(self, rhs: Spectrum<N>) -> Self::Output {
        let mut c = [0_f64; N];
        for i in 0..N {
            c[i] = self.c[i] + rhs.c[i];
        }
        Spectrum::<N>::new(c)
    }
}

impl<const N: usize> AddAssign<Spectrum<N>> for Spectrum<N> {
    fn add_assign(&mut self, rhs: Spectrum<N>) {
        for i in 0..N {
            self.c[i] += rhs.c[i];
        }
    }
}

impl<const N: usize> Div<Spectrum<N>> for Spectrum<N> {
    type Output = Spectrum<N>;
    fn div(self, rhs: Spectrum<N>) -> Self::Output {
        let mut c = [0_f64; N];
        for i in 0..N {
            c[i] = self.c[i] / rhs.c[i];
        }
        Spectrum::<N>::new(c)
    }
}

impl<const N: usize> DivAssign<Spectrum<N>> for Spectrum<N> {
    fn div_assign(&mut self, rhs: Spectrum<N>) {
        for i in 0..N {
            self.c[i] /= rhs.c[i];
        }
    }
}

impl<const N: usize> Div<f64> for Spectrum<N> {
    type Output = Spectrum<N>;
    fn div(self, rhs: f64) -> Self::Output {
        let mut c = [0_f64; N];
        for i in 0..N {
            c[i] = self.c[i] / rhs;
        }
        Spectrum::<N>::new(c)
    }
}

impl<const N: usize> DivAssign<f64> for Spectrum<N> {
    fn div_assign(&mut self, rhs: f64) {
        for i in 0..N {
            self.c[i] /= rhs;
        }
    }
}

impl<const N: usize> Mul<Spectrum<N>> for Spectrum<N> {
    type Output = Spectrum<N>;
    fn mul(self, rhs: Spectrum<N>) -> Self::Output {
        let mut c = [0_f64; N];
        assert_eq!(N, rhs.c.len());
        for i in 0..N {
            c[i] = self.c[i] * rhs.c[i];
        }
        Spectrum::<N>::new(c)
    }
}

impl<const N: usize> MulAssign<Spectrum<N>> for Spectrum<N> {
    fn mul_assign(&mut self, rhs: Spectrum<N>) {
        assert_eq!(N, rhs.c.len());
        for i in 0..N {
            self.c[i] *= rhs.c[i];
        }
    }
}

impl<const N: usize> Mul<f64> for Spectrum<N> {
    type Output = Spectrum<N>;
    fn mul(self, rhs: f64) -> Self::Output {
        let mut c = [0_f64; N];
        for i in 0..N {
            c[i] = self.c[i] * rhs;
        }
        Spectrum::<N>::new(c)
    }
}

impl<const N: usize> MulAssign<f64> for Spectrum<N> {
    fn mul_assign(&mut self, rhs: f64) {
        for i in 0..N {
            self.c[i] *= rhs;
        }
    }
}

impl<const N: usize> Sub<Spectrum<N>> for Spectrum<N> {
    type Output = Spectrum<N>;
    fn sub(self, rhs: Spectrum<N>) -> Self::Output {
        let mut c = [0_f64; N];
        assert_eq!(N, rhs.c.len());
        for i in 0..N {
            c[i] = self.c[i] - rhs.c[i];
        }
        Spectrum::<N>::new(c)
    }
}

impl<const N: usize> SubAssign<Spectrum<N>> for Spectrum<N> {
    fn sub_assign(&mut self, rhs: Spectrum<N>) {
        assert_eq!(N, rhs.c.len());
        for i in 0..N {
            self.c[i] -= rhs.c[i];
        }
    }
}

impl<const N: usize> Neg for Spectrum<N> {
    type Output = Spectrum<N>;
    fn neg(self) -> Self::Output {
        let mut c = [0_f64; N];
        for i in 0..N {
            c[i] = -self.c[i];
        }
        Spectrum::<N>::new(c)
    }
}

impl<const N: usize> Index<usize> for Spectrum<N> {
    type Output = f64;

    fn index(&self, index: usize) -> &Self::Output {
        assert!(index < N);
        &self.c[index]
    }
}

impl<const N: usize> IndexMut<usize> for Spectrum<N> {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        assert!(index < N);
        &mut self.c[index]
    }
}

impl<const N: usize> From<f64> for Spectrum<N> {
    fn from(v: f64) -> Self {
        let c = [v; N];
        Self { c }
    }
}

impl<const N: usize> PartialEq for Spectrum<N> {
    fn eq(&self, other: &Self) -> bool {
        for i in 0..N {
            if self[i] != other[i] {
                return false;
            }
        }
        true
    }
}

#[derive(Debug, Default, Clone)]
pub struct SampledSpectrumStatic {
    pub x: SampledSpectrum,
    pub y: SampledSpectrum,
    pub z: SampledSpectrum,
    pub rgb_refl_2_spect_white: SampledSpectrum,
    pub rgb_refl_2_spect_cyan: SampledSpectrum,
    pub rgb_refl_2_spect_magenta: SampledSpectrum,
    pub rgb_refl_2_spect_yellow: SampledSpectrum,
    pub rgb_refl_2_spect_red: SampledSpectrum,
    pub rgb_refl_2_spect_green: SampledSpectrum,
    pub rgb_refl_2_spect_blue: SampledSpectrum,
    pub rgb_illum_2_spect_white: SampledSpectrum,
    pub rgb_illum_2_spect_cyan: SampledSpectrum,
    pub rgb_illum_2_spect_magenta: SampledSpectrum,
    pub rgb_illum_2_spect_yellow: SampledSpectrum,
    pub rgb_illum_2_spect_red: SampledSpectrum,
    pub rgb_illum_2_spect_green: SampledSpectrum,
    pub rgb_illum_2_spect_blue: SampledSpectrum,
}

impl SampledSpectrumStatic {
    pub fn init(&mut self) {
        for i in 0..N_SPECTRAL_SAMPLES {
            let wl0 = lerp(
                i as f64 / N_SPECTRAL_SAMPLES as f64,
                SAMPLED_LAMBDA_START as f64,
                SAMPLED_LAMBDA_END as f64,
            );
            let wl1 = lerp(
                (i + 1) as f64 / N_SPECTRAL_SAMPLES as f64,
                SAMPLED_LAMBDA_START as f64,
                SAMPLED_LAMBDA_END as f64,
            );
            // Compute XYZ matching functions for _SampledSpectrum_

            self.x.c[i] = average_spectrum_samples(&CIE_LAMBDA, &CIE_X, N_CIE_SAMPLES, wl0, wl1);
            self.y.c[i] = average_spectrum_samples(&CIE_LAMBDA, &CIE_Y, N_CIE_SAMPLES, wl0, wl1);
            self.z.c[i] = average_spectrum_samples(&CIE_LAMBDA, &CIE_Z, N_CIE_SAMPLES, wl0, wl1);

            // Compute RGB to spectrum functions for _SampledSpectrum_

            self.rgb_refl_2_spect_white.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_REFL_2_SPECT_WHITE,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_refl_2_spect_cyan.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_REFL_2_SPECT_CYAN,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_refl_2_spect_magenta.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_REFL_2_SPECT_MAGENTA,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_refl_2_spect_yellow.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_REFL_2_SPECT_YELLOW,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_refl_2_spect_red.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_REFL_2_SPECT_RED,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_refl_2_spect_green.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_REFL_2_SPECT_GREEN,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_refl_2_spect_blue.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_REFL_2_SPECT_BLUE,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );

            self.rgb_illum_2_spect_white.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_ILLUM_2_SPECT_WHITE,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_illum_2_spect_cyan.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_ILLUM_2_SPECT_CYAN,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_illum_2_spect_magenta.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_ILLUM_2_SPECT_MAGENTA,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_illum_2_spect_yellow.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_ILLUM_2_SPECT_YELLOW,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_illum_2_spect_red.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_ILLUM_2_SPECT_RED,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_illum_2_spect_green.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_ILLUM_2_SPECT_GREEN,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
            self.rgb_illum_2_spect_blue.c[i] = average_spectrum_samples(
                &RGB_2_SPECTLAMBDA,
                &RGB_ILLUM_2_SPECT_BLUE,
                N_RGB_2_SPECTSAMPLES,
                wl0,
                wl1,
            );
        }
    }
}

lazy_static! {
    pub static ref SAMPLEDSPECTRUMSTATIC: SampledSpectrumStatic = {
        let mut s = SampledSpectrumStatic::default();
        s.init();
        s
    };
}

pub trait ISpectrum {
    fn from_sampled(lambda: &[f64], v: &[f64], n: usize) -> Self;
    fn to_xyz(&self) -> [f64; 3];
    fn y(&self) -> f64;
    fn to_rgb(&self) -> [f64; 3];
    fn from_rgb(rgb: [f64; 3], ty: SpectrumType) -> Self;
    fn from_xyz(xyz: [f64; 3], ty: SpectrumType) -> Self;
}

impl ISpectrum for SampledSpectrum {
    fn from_sampled(lambda: &[f64], v: &[f64], n: usize) -> Self {
        // Sort samples if unordered, use sorted for returned spectrum
        if !spectrum_samples_sorted(lambda, n) {
            let mut slambda = vec![];
            slambda.copy_from_slice(lambda);
            let mut sv = vec![];
            sv.copy_from_slice(v);
            sort_spectrum_samples(slambda.as_mut_slice(), sv.as_mut_slice(), n);
            return Self::from_sampled(slambda.as_slice(), sv.as_slice(), n);
        }
        let mut r = SampledSpectrum::default();
        for i in 0..N_SPECTRAL_SAMPLES {
            // Compute average value of given SPD over $i$th sample's range
            let lambda0 = lerp(
                i as f64 / N_SPECTRAL_SAMPLES as f64,
                SAMPLED_LAMBDA_START as f64,
                SAMPLED_LAMBDA_END as f64,
            );
            let lambda1 = lerp(
                (i + 1) as f64 / N_SPECTRAL_SAMPLES as f64,
                SAMPLED_LAMBDA_START as f64,
                SAMPLED_LAMBDA_END as f64,
            );
            r.c[i] = average_spectrum_samples(lambda, v, n, lambda0, lambda1);
        }
        r
    }
    fn to_xyz(&self) -> [f64; 3] {
        let mut xyz = [0.0, 0.0, 0.0];
        for i in 0..N_SPECTRAL_SAMPLES {
            xyz[0] += SAMPLEDSPECTRUMSTATIC.x.c[i] * self.c[i];
            xyz[1] += SAMPLEDSPECTRUMSTATIC.y.c[i] * self.c[i];
            xyz[2] += SAMPLEDSPECTRUMSTATIC.z.c[i] * self.c[i];
        }
        let scale = (SAMPLED_LAMBDA_END - SAMPLED_LAMBDA_START) as f64
            / (CIE_Y_INTEGRAL * N_SPECTRAL_SAMPLES as f64);
        xyz[0] *= scale;
        xyz[1] *= scale;
        xyz[2] *= scale;
        xyz
    }
    fn y(&self) -> f64 {
        let mut yy = 0.0;
        for i in 0..N_SPECTRAL_SAMPLES {
            yy += SAMPLEDSPECTRUMSTATIC.y.c[i] * self.c[i];
        }
        return yy * (SAMPLED_LAMBDA_END - SAMPLED_LAMBDA_START) as f64
            / (CIE_Y_INTEGRAL * N_SPECTRAL_SAMPLES as f64);
    }
    fn to_rgb(&self) -> [f64; 3] {
        let mut xyz = self.to_xyz();
        let mut rgb = [0.0, 0.0, 0.0];
        xyz_to_rgb(&mut xyz, &mut rgb);
        rgb
    }
    fn from_rgb(rgb: [f64; 3], ty: SpectrumType) -> Self {
        let mut r = Self::default();
        match ty {
            SpectrumType::Reflectance => {
                // Convert reflectance spectrum to RGB
                if rgb[0] <= rgb[1] && rgb[0] <= rgb[2] {
                    // Compute reflectance _SampledSpectrum_ with _rgb[0]_ as minimum
                    r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_white * rgb[0];
                    if rgb[1] <= rgb[2] {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_cyan * (rgb[1] - rgb[0]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_blue * (rgb[2] - rgb[1]);
                    } else {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_cyan * (rgb[2] - rgb[0]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_green * (rgb[1] - rgb[2]);
                    }
                } else if rgb[1] <= rgb[0] && rgb[1] <= rgb[2] {
                    // Compute reflectance _SampledSpectrum_ with _rgb[1]_ as minimum
                    r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_white * rgb[1];
                    if rgb[0] <= rgb[2] {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_magenta * (rgb[0] - rgb[1]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_blue * (rgb[2] - rgb[0]);
                    } else {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_magenta * (rgb[2] - rgb[1]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_red * (rgb[0] - rgb[2]);
                    }
                } else {
                    // Compute reflectance _SampledSpectrum_ with _rgb[2]_ as minimum
                    r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_white * rgb[2];
                    if rgb[0] <= rgb[1] {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_yellow * (rgb[0] - rgb[2]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_green * (rgb[1] - rgb[0]);
                    } else {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_yellow * (rgb[1] - rgb[2]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_refl_2_spect_red * (rgb[0] - rgb[1]);
                    }
                }
                r *= 0.94;
            }
            SpectrumType::Illuminant => {
                // Convert illuminant spectrum to RGB
                if rgb[0] <= rgb[1] && rgb[0] <= rgb[2] {
                    // Compute illuminant _SampledSpectrum_ with _rgb[0]_ as minimum
                    r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_white * rgb[0];
                    if rgb[1] <= rgb[2] {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_cyan * (rgb[1] - rgb[0]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_blue * (rgb[2] - rgb[1]);
                    } else {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_cyan * (rgb[2] - rgb[0]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_green * (rgb[1] - rgb[2]);
                    }
                } else if rgb[1] <= rgb[0] && rgb[1] <= rgb[2] {
                    // Compute illuminant _SampledSpectrum_ with _rgb[1]_ as minimum
                    r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_white * rgb[1];
                    if rgb[0] <= rgb[2] {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_magenta * (rgb[0] - rgb[1]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_blue * (rgb[2] - rgb[0]);
                    } else {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_magenta * (rgb[2] - rgb[1]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_red * (rgb[0] - rgb[2]);
                    }
                } else {
                    // Compute illuminant _SampledSpectrum_ with _rgb[2]_ as minimum
                    r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_white * rgb[2];
                    if rgb[0] <= rgb[1] {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_yellow * (rgb[0] - rgb[2]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_green * (rgb[1] - rgb[0]);
                    } else {
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_yellow * (rgb[1] - rgb[2]);
                        r += SAMPLEDSPECTRUMSTATIC.rgb_illum_2_spect_red * (rgb[0] - rgb[1]);
                    }
                }
                r *= 0.86445f64;
            }
        }
        r.clamp(0.0, f64::MAX)
    }
    fn from_xyz(xyz: [f64; 3], ty: SpectrumType) -> Self {
        // Float rgb[3];
        let mut rgb = [0.0, 0.0, 0.0];
        xyz_to_rgb(&xyz, &mut rgb);
        Self::from_rgb(rgb, ty)
    }
}

impl ISpectrum for RGBSpectrum {
    fn from_sampled(lambda: &[f64], v: &[f64], n: usize) -> Self {
        // Sort samples if unordered, use sorted for returned spectrum
        if !spectrum_samples_sorted(lambda, n) {
            let mut slambda = vec![];
            slambda.copy_from_slice(lambda);
            let mut sv = vec![];
            sv.copy_from_slice(v);
            sort_spectrum_samples(slambda.as_mut_slice(), sv.as_mut_slice(), n);
            return Self::from_sampled(slambda.as_slice(), sv.as_slice(), n);
        }
        let mut xyz = [0.0; 3];

        for i in 0..N_CIE_SAMPLES {
            let val = interpolate_spectrum_samples(lambda, v, n, CIE_LAMBDA[i]);
            xyz[0] += val * CIE_X[i];
            xyz[1] += val * CIE_Y[i];
            xyz[2] += val * CIE_Z[i];
        }

        let scale = (CIE_LAMBDA[N_CIE_SAMPLES - 1] - CIE_LAMBDA[0])
            / (CIE_Y_INTEGRAL * N_CIE_SAMPLES as f64);

        xyz[0] *= scale;
        xyz[1] *= scale;
        xyz[2] *= scale;
        Self::from_xyz(xyz, SpectrumType::Reflectance)
    }
    fn to_xyz(&self) -> [f64; 3] {
        let mut xyz = [0.0; 3];
        rgb_to_xyz(&self.c, &mut xyz);
        xyz
    }
    fn y(&self) -> f64 {
        let y_weight = [0.212671f64, 0.715160f64, 0.072169f64];
        y_weight[0] * self.c[0] + y_weight[1] * self.c[1] + y_weight[2] * self.c[2]
    }
    fn to_rgb(&self) -> [f64; 3] {
        [self.c[0], self.c[1], self.c[2]]
    }
    fn from_rgb(rgb: [f64; 3], _ty: SpectrumType) -> Self {
        Self::new(rgb)
    }
    fn from_xyz(xyz: [f64; 3], _ty: SpectrumType) -> Self {
        let mut rgb = [0.0; 3];
        xyz_to_rgb(&xyz, &mut rgb);
        Self::new(rgb)
    }
}
